{"ast":null,"code":"// Подключаемся к контракту\n\nimport { ethers } from \"ethers\";\nconst contractAddress = \"0x7f10b6c77d8104EC0a9D94ed2410f5360B131180\"; //Замените вашим контрактом\n\n// Указываем ABI (Application Binary Interface) контракта\nconst abi = [{\n  inputs: [],\n  stateMutability: \"payable\",\n  type: \"constructor\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: false,\n    internalType: \"address\",\n    name: \"player\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"bool\",\n    name: \"isWinner\",\n    type: \"bool\"\n  }, {\n    indexed: false,\n    internalType: \"string\",\n    name: \"mssg\",\n    type: \"string\"\n  }],\n  name: \"GamePlayed\",\n  type: \"event\"\n}, {\n  inputs: [{\n    internalType: \"uint8\",\n    name: \"_option\",\n    type: \"uint8\"\n  }],\n  name: \"playGame\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"payable\",\n  type: \"function\"\n}, {\n  stateMutability: \"payable\",\n  type: \"receive\"\n}];\n\n// Подключаемся к web3 провайдеру (метамаск)\nconst provider = new ethers.providers.Web3Provider(window.ethereum, 97);\nlet signer;\nlet contract;\n\n//Запрашиваем аккаунты пользователя и подключаемся к первому аккаунту\nprovider.send(\"eth_requestAccounts\", []).then(() => {\n  provider.listAccounts().then(accounts => {\n    signer = provider.getSigner(accounts[0]);\n    //Создаем объект контракта\n    contract = new ethers.Contract(contractAddress, abi, signer);\n    console.log(contract);\n  });\n});\n\n//Вызываем playGame() в смарт-контракте\nasync function playGame(option) {\n  const result = await contract.playGame(option);\n  console.log(result);\n  if (result) {} else {}\n}\n\n//Вызываем getNote() в смарт-контракте и показываем пользователю\n// async function getNote() {\n//   const note = await contract.getNote();\n//   console.log(getNote);\n//   document.getElementById(\"result\").innerText = note;\n// }","map":{"version":3,"names":["ethers","contractAddress","abi","inputs","stateMutability","type","anonymous","indexed","internalType","name","outputs","provider","providers","Web3Provider","window","ethereum","signer","contract","send","then","listAccounts","accounts","getSigner","Contract","console","log","playGame","option","result"],"sources":["/Users/ajsanaolpan/Desktop/HomeWork1/my-app/src/containers/main/script.js"],"sourcesContent":["// Подключаемся к контракту\n\nimport { ethers } from \"ethers\";\nconst contractAddress = \"0x7f10b6c77d8104EC0a9D94ed2410f5360B131180\"; //Замените вашим контрактом\n\n// Указываем ABI (Application Binary Interface) контракта\nconst abi = [\n  {\n    inputs: [],\n    stateMutability: \"payable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"player\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"isWinner\",\n        type: \"bool\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"mssg\",\n        type: \"string\",\n      },\n    ],\n    name: \"GamePlayed\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint8\",\n        name: \"_option\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"playGame\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n];\n\n// Подключаемся к web3 провайдеру (метамаск)\nconst provider = new ethers.providers.Web3Provider(window.ethereum, 97);\n\nlet signer;\nlet contract;\n\n//Запрашиваем аккаунты пользователя и подключаемся к первому аккаунту\nprovider.send(\"eth_requestAccounts\", []).then(() => {\n  provider.listAccounts().then((accounts) => {\n    signer = provider.getSigner(accounts[0]);\n    //Создаем объект контракта\n    contract = new ethers.Contract(contractAddress, abi, signer);\n    console.log(contract);\n  });\n});\n\n//Вызываем playGame() в смарт-контракте\nasync function playGame(option) {\n  const result = await contract.playGame(option);\n  console.log(result);\n  if (result) {\n  } else {\n  }\n}\n\n//Вызываем getNote() в смарт-контракте и показываем пользователю\n// async function getNote() {\n//   const note = await contract.getNote();\n//   console.log(getNote);\n//   document.getElementById(\"result\").innerText = note;\n// }\n"],"mappings":"AAAA;;AAEA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,MAAMC,eAAe,GAAG,4CAA4C,CAAC,CAAC;;AAEtE;AACA,MAAMC,GAAG,GAAG,CACV;EACEC,MAAM,EAAE,EAAE;EACVC,eAAe,EAAE,SAAS;EAC1BC,IAAI,EAAE;AACR,CAAC,EACD;EACEC,SAAS,EAAE,KAAK;EAChBH,MAAM,EAAE,CACN;IACEI,OAAO,EAAE,KAAK;IACdC,YAAY,EAAE,SAAS;IACvBC,IAAI,EAAE,QAAQ;IACdJ,IAAI,EAAE;EACR,CAAC,EACD;IACEE,OAAO,EAAE,KAAK;IACdC,YAAY,EAAE,MAAM;IACpBC,IAAI,EAAE,UAAU;IAChBJ,IAAI,EAAE;EACR,CAAC,EACD;IACEE,OAAO,EAAE,KAAK;IACdC,YAAY,EAAE,QAAQ;IACtBC,IAAI,EAAE,MAAM;IACZJ,IAAI,EAAE;EACR,CAAC,CACF;EACDI,IAAI,EAAE,YAAY;EAClBJ,IAAI,EAAE;AACR,CAAC,EACD;EACEF,MAAM,EAAE,CACN;IACEK,YAAY,EAAE,OAAO;IACrBC,IAAI,EAAE,SAAS;IACfJ,IAAI,EAAE;EACR,CAAC,CACF;EACDI,IAAI,EAAE,UAAU;EAChBC,OAAO,EAAE,CACP;IACEF,YAAY,EAAE,MAAM;IACpBC,IAAI,EAAE,EAAE;IACRJ,IAAI,EAAE;EACR,CAAC,CACF;EACDD,eAAe,EAAE,SAAS;EAC1BC,IAAI,EAAE;AACR,CAAC,EACD;EACED,eAAe,EAAE,SAAS;EAC1BC,IAAI,EAAE;AACR,CAAC,CACF;;AAED;AACA,MAAMM,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,EAAE,EAAE,CAAC;AAEvE,IAAIC,MAAM;AACV,IAAIC,QAAQ;;AAEZ;AACAN,QAAQ,CAACO,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,MAAM;EAClDR,QAAQ,CAACS,YAAY,EAAE,CAACD,IAAI,CAAEE,QAAQ,IAAK;IACzCL,MAAM,GAAGL,QAAQ,CAACW,SAAS,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxC;IACAJ,QAAQ,GAAG,IAAIjB,MAAM,CAACuB,QAAQ,CAACtB,eAAe,EAAEC,GAAG,EAAEc,MAAM,CAAC;IAC5DQ,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;EACvB,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,eAAeS,QAAQA,CAACC,MAAM,EAAE;EAC9B,MAAMC,MAAM,GAAG,MAAMX,QAAQ,CAACS,QAAQ,CAACC,MAAM,CAAC;EAC9CH,OAAO,CAACC,GAAG,CAACG,MAAM,CAAC;EACnB,IAAIA,MAAM,EAAE,CACZ,CAAC,MAAM,CACP;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}